buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
    }
}

plugins {
    id "org.sonarqube" version "2.7"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'com.github.johnrengelman.shadow'

group = 'com.iexec.common'
sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenCentral()
    jcenter()
    maven {
        url "https://jitpack.io"
    }
}

configurations {
    deployerJars
}

ext {
    junitVersion = '4.12'
    web3jVersion = '4.8.1'
}

dependencies {
    // lombok
    compileOnly "org.projectlombok:lombok:1.18.2"
    annotationProcessor "org.projectlombok:lombok:1.18.2"

    // web3j dependency
    compile "org.web3j:core:$web3jVersion"

    // Flowable
    compile group: 'io.reactivex.rxjava2', name: 'rxjava', version: '2.2.20'


    // apache commons.lang3
    compile "org.apache.commons:commons-lang3:3.9"

    // multiaddresses (IPFS)
    compile 'com.github.multiformats:java-multiaddr:1.3.1'

    //jaxb required with Java 11
    compile 'javax.xml.bind:jaxb-api:2.3.0'

    //args utils
    compile 'org.apache.maven.shared:maven-shared-utils:3.2.1'

    // zip
    compile 'net.lingala.zip4j:zip4j:2.3.1'

    // google core libs
    implementation "com.google.guava:guava:28.2-jre"

    // test
    testCompile "junit:junit:$junitVersion"
    testCompile("org.assertj:assertj-core:3.11.1")

    // package cloud
    deployerJars "io.packagecloud.maven.wagon:maven-packagecloud-wagon:0.0.6"
}

test {
    reports {
        junitXml.enabled = true
        html.enabled = true
    }
}

shadowJar { //required if we want to embed web3j dependency inside
    baseName = rootProject.name
    from sourceSets.main.allSource
    version = version
}

build.dependsOn(shadowJar)

def gitBranch = 'git name-rev --name-only HEAD'.execute().text.trim()
def isMasterBranch = gitBranch == "master"
def isDevelopBranch = gitBranch == "develop"
def canUploadArchives = isMasterBranch || isDevelopBranch
def isSnapshotVersion = project.version.contains("SNAPSHOT")

project.ext.getNexusMaven = {
    def nexusMavenBase = "https://nexus.iex.ec/repository"
    if (isSnapshotVersion) {
        return nexusMavenBase + "/maven-snapshots/"
    } else {
        return nexusMavenBase + "/maven-releases/"
    }
}

uploadArchives {
    repositories.mavenDeployer {
        configuration = configurations.deployerJars
        repository(url: getNexusMaven()) {
            authentication(userName: nexusUser, password: nexusPassword)
        }
    }
}

uploadArchives.enabled = canUploadArchives