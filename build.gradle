buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
    }
}

plugins {
    id "org.sonarqube" version "2.7"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'com.github.johnrengelman.shadow'

group = 'io.iexec.common'
sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenCentral()
    jcenter()
    maven {
        url "https://jitpack.io"
    }
}

configurations {
    deployerJars
}

ext {
    junitVersion = '4.12'
    web3jVersion = '4.6.0'
}

dependencies {
    // lombok
    compileOnly "org.projectlombok:lombok:1.18.2"
    annotationProcessor "org.projectlombok:lombok:1.18.2"

    // web3j dependency
    compile "org.web3j:core:$web3jVersion"

    // apache commons.lang3
    compile "org.apache.commons:commons-lang3:3.9"

    // multiaddresses (IPFS)
    compile 'com.github.multiformats:java-multiaddr:1.3.1'

    //jaxb required with Java 11
    compile 'javax.xml.bind:jaxb-api:2.3.0'

    //args utils
    compile 'org.apache.maven.shared:maven-shared-utils:3.2.1'

    // zip
    compile 'net.lingala.zip4j:zip4j:2.3.1'

    // google core libs
    implementation "com.google.guava:guava:28.2-jre"

    // test
    testCompile "junit:junit:$junitVersion"
    testCompile("org.assertj:assertj-core:3.11.1")

    // package cloud
    deployerJars "io.packagecloud.maven.wagon:maven-packagecloud-wagon:0.0.6"
}

test {
    reports {
        junitXml.enabled = true
        html.enabled = true
    }
}

shadowJar { //required if we want to embed web3j dependency inside
    baseName = rootProject.name
    from sourceSets.main.allSource
    version = version
}

build.dependsOn(shadowJar)

def gitBranch = 'git name-rev --name-only HEAD'.execute().text.trim()
def isMasterBranch = gitBranch == "master"
def isDevelopBranch = gitBranch == "develop"
def canUploadArchives = isMasterBranch || isDevelopBranch
def isSnapshotVersion = project.version.contains("SNAPSHOT")

task javadocJar(type: Jar) {
    archiveClassifier.set("javadoc")
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    //required { !isSnapshotVersion } //TODO check required
    sign configurations.archives
}

uploadArchives {
    repositories.mavenDeployer {
        configuration = configurations.deployerJars
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
            authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
            authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        pom.project {
            name 'iExec Common'
            groupId project.group
            artifactId project.name
            version project.version
            packaging 'jar'

            description 'This iexec-common library embeds iExec objects required for the iExec ' +
                    'offchain-protocol & enables native off-chain/on-chain communication with iExec Smart-Contracts. ' +
                    'This library is at least required for iexec-core, iexec-worker, iexec-worker-post, iexec-sms, ' +
                    'iexec-result and more.'
            url 'https://github.com/iExecBlockchainComputing/iexec-common'

            scm {
                connection 'scm:git:git://github.com/iExecBlockchainComputing/iexec-common.git'
                developerConnection 'scm:git:ssh://github.com:iExecBlockchainComputing/iexec-common.git'
                url 'https://github.com/iExecBlockchainComputing/iexec-common/tree/master'
            }

            licenses {
                license {
                    name 'The Apache License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                }
            }

            developers {
                developer {
                    name 'Jérémy James Toussaint'
                    email 'jeremy.toussaint@iex.ec'
                    url 'https://github.com/jeremyjams'
                    organization 'iExec'
                    organizationUrl 'https://iex.ec'
                }
                developer {
                    name 'Zied Guesmi'
                    email 'zied.guesmi@iex.ec'
                    url 'https://github.com/zguesmi'
                    organization 'iExec'
                    organizationUrl 'https://iex.ec'
                }
            }
        }
    }
}

uploadArchives.enabled = canUploadArchives